"""A collection"""
type Collection implements Node & Sluggable {
  createdAt: ISO8601DateTime!
  description: String!
  id: ID!
  items(
    order: SimpleOrder = RECENT

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ItemConnection!
  slug: Slug!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Collection."""
type CollectionConnection {
  """A list of edges."""
  edges: [CollectionEdge]

  """A list of nodes."""
  nodes: [Collection]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Collection
}

"""Autogenerated input type of CreateCollection"""
input CreateCollectionInput {
  title: String!
  description: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateCollection"""
type CreateCollectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  collection: Collection
  errors: [UserError!]!
  haltCode: String
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""An item that belongs to a collection"""
type Item implements Node & Sluggable {
  collection: Collection!
  createdAt: ISO8601DateTime!
  description: String!
  id: ID!
  slug: Slug!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Item."""
type ItemConnection {
  """A list of edges."""
  edges: [ItemEdge]

  """A list of nodes."""
  nodes: [Item]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Item
}

type Mutation {
  createCollection(
    """Parameters for CreateCollection"""
    input: CreateCollectionInput!
  ): CreateCollectionPayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  collection(slug: Slug!): Collection
  collections(
    order: SimpleOrder = RECENT

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): CollectionConnection!
  item(slug: Slug!): Item

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """The currently authenticated user. AKA: you"""
  viewer: User
}

enum SimpleOrder {
  RECENT
  OLDEST
}

"""A slug that can identify a record in context"""
scalar Slug

interface Sluggable {
  slug: Slug!
}

"""A user"""
type User implements Node & Sluggable {
  email: String
  emailVerified: Boolean!
  globalAdmin: Boolean!
  id: ID!
  name: String
  slug: Slug!
  username: String
}

"""A user-readable error"""
type UserError {
  code: String

  """A description of the error"""
  message: String!

  """Which input value this error came from"""
  path: [String!]
}
